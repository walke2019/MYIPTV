name: IPTV FFmpeg测速

on:
  workflow_run:
    workflows: ["IPTV M3U 每天自动更新"]
    types:
      - completed
    branches:
      - main
  # 也支持手动触发
  workflow_dispatch:
  # 定时触发，在IPTV M3U每天自动更新后半小时执行
  schedule:
    - cron: '30 4 * * *'  # 每天北京时间12:30执行（UTC+8）

# 添加必要的权限设置
permissions:
  contents: write
  actions: write  # 允许工作流修改操作

jobs:
  ffmpeg-test:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为中国时区

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 安装 pipenv
        run: |
          echo "正在安装 pipenv..."
          pip install pipenv
          if [ $? -ne 0 ]; then
            echo "安装 pipenv 失败。请检查网络或 Python 环境。"
            exit 1
          fi

      - name: 安装依赖项
        run: |
          echo "正在安装项目依赖项..."
          pipenv install --deploy
          if [ $? -ne 0 ]; then
            echo "安装项目依赖项失败。检查 Pipfile 或网络。"
            exit 1
          fi

      - name: 安装 FFmpeg
        run: |
          echo "正在安装 FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          if [ $? -ne 0 ]; then
            echo "安装 FFmpeg 失败。检查系统权限或网络。"
            exit 1
          fi

      - name: 检查必要文件
        run: |
          if [ ! -f "output/result.m3u" ]; then
            echo "错误: 找不到 output/result.m3u 文件，无法进行FFmpeg测试"
            echo "当前目录内容:"
            ls -la
            echo "output 目录内容:"
            ls -la output/ || echo "output目录不存在"
            exit 1
          fi

          if [ ! -f "config/ffmpeg.txt" ]; then
            echo "警告: 找不到 config/ffmpeg.txt 文件，创建示例文件"
            mkdir -p config
            echo "湖南卫视" > config/ffmpeg.txt
          fi

      - name: 执行 FFmpeg 测速
        run: |
          echo "正在执行 FFmpeg 测速..."
          pipenv run python main.py --ffmpeg_test 2>&1 | tee ffmpeg_test.log
          if [ $? -ne 0 ]; then
            echo "FFmpeg 测速失败。检查 main.py 或依赖项。"
            echo "查看 ffmpeg_test.log 获取详细错误信息:"
            cat ffmpeg_test.log
            exit 1
          fi

      - name: 检查测速结果
        run: |
          # 检查测速结果文件
          required_files=(
            "output/result.m3u"
            "output/result.txt"
          )
          
          echo "检查测速结果文件..."
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "错误: 文件 $file 未生成"
              echo "当前目录内容:"
              ls -la
              echo "output 目录内容:"
              ls -la output/
              exit 1
            else
              echo "✓ 找到文件 $file"
              filesize=$(wc -c < "$file")
              echo "文件大小: $filesize 字节"
            fi
          done
          
      - name: 更新 README
        run: |
          # 移除旧的更新信息
          sed -i '/## 最新更新信息/,$d' README.md || true
          
          # 在 README.md 中添加更新信息
          cat << EOF >> README.md
          
          ## 最新更新信息
          更新时间：$(date '+%Y-%m-%d %H:%M:%S')
          
          ### 可用文件（FFmpeg测试后）
          - M3U格式：[\`result.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.m3u)
          - TXT格式：[\`result.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.txt)
          
          ### HTTP测速结果
          - M3U格式：[\`first_test.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/first_test.m3u)
          - TXT格式：[\`first_test.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/first_test.txt)
          EOF
          
      - name: 提交并推送更改
        run: |
          # 配置 Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 储藏未提交的更改
          git stash || true
          
          # 先拉取最新代码
          git pull --rebase origin main
          
          # 指定要添加的文件
          files_to_add=(
            "output/result.m3u"
            "output/result.txt"
            "README.md"
          )
          
          # 确保README.md内容发生更改，添加时间戳
          echo "确保README.md发生更改" >> README.md
          echo "更新时间: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
          
          # 强制添加文件，即使被 .gitignore 忽略
          for file in "${files_to_add[@]}"; do
            if [ -f "$file" ]; then
              git add -f "$file"
              echo "已添加文件: $file"
            else
              echo "文件 $file 不存在，跳过添加"
            fi
          done
          
          # 直接提交更改，不再检查是否有差异
          echo "提交更改..."
          git commit -m "更新 FFmpeg 测速结果 - $(date '+%Y-%m-%d %H:%M:%S')" || echo "没有需要提交的更改"
          git push || echo "推送失败或没有更改可推送" 