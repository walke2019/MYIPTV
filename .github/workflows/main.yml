name: IPTV M3U 每天自动更新

on:
  schedule:
    - cron: '0 4 * * *'  # 每天北京时间12点执行（UTC+8）
  workflow_dispatch:

# 添加必要的权限设置
permissions:
  contents: write
  actions: write  # 允许工作流修改操作
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为中国时区

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 检查 Pipfile 格式
        run: |
          if [ -f "Pipfile" ]; then
            echo "开始检查 Pipfile 格式..."
            pip install toml
            set +e
            python -c "import toml; toml.load(open('Pipfile'))"
            check_status=$?
            set -e
            if [ $check_status -eq 0 ]; then
              echo "Pipfile 格式有效。"
            else
              echo "Pipfile 格式无效。以下是 Pipfile 的内容:"
              cat Pipfile
              exit 1
            fi
          else
            echo "在项目目录中未找到 Pipfile。请确保其存在。"
            exit 1
          fi

      - name: 安装 pipenv
        run: |
          echo "正在安装 pipenv..."
          pip install pipenv
          if [ $? -ne 0 ]; then
            echo "安装 pipenv 失败。请检查网络或 Python 环境。"
            exit 1
          fi

      - name: 安装依赖项
        run: |
          echo "正在安装项目依赖项..."
          pipenv install --deploy
          if [ $? -ne 0 ]; then
            echo "安装项目依赖项失败。检查 Pipfile 或网络。"
            exit 1
          fi

      - name: 安装 FFmpeg
        run: |
          echo "正在安装 FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          if [ $? -ne 0 ]; then
            echo "安装 FFmpeg 失败。检查系统权限或网络。"
            exit 1
          fi

      - name: 第一次测速
        run: |
          if [ -f "main.py" ]; then
            echo "正在运行第一次测速..."
            pipenv run python main.py --first_test 2>&1 | tee first_test.log
            if [ $? -ne 0 ]; then
              echo "第一次测速失败。检查 main.py 或依赖项。"
              echo "查看 first_test.log 获取详细错误信息:"
              cat first_test.log
              exit 1
            fi
          else
            echo "未找到 main.py 文件，当前目录内容:"
            ls -la
            exit 1
          fi
          
      - name: 保存第一次测速结果
        run: |
          # 检查第一次测速生成的文件
          required_files=(
            "output/first_test.m3u"
            "output/first_test.txt"
          )
          
          echo "检查第一次测速生成的文件..."
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "错误: 文件 $file 未生成"
              echo "当前目录内容:"
              ls -la
              echo "output 目录内容:"
              ls -la output/
              exit 1
            else
              echo "✓ 找到文件 $file"
              filesize=$(wc -c < "$file")
              echo "文件大小: $filesize 字节"
            fi
          done
          
      - name: 第二次测速
        run: |
          if [ -f "main.py" ]; then
            echo "正在运行第二次测速（HTTP测速）..."
            pipenv run python main.py --http_test 2>&1 | tee http_test.log
            if [ $? -ne 0 ]; then
              echo "第二次测速失败。检查 main.py 或依赖项。"
              echo "查看 http_test.log 获取详细错误信息:"
              cat http_test.log
              exit 1
            fi
          else
            echo "未找到 main.py 文件"
            exit 1
          fi
          
      - name: 保存第二次测速结果
        run: |
          # 检查第二次测速生成的文件
          required_files=(
            "output/result.m3u"
            "output/result.txt"
          )
          
          echo "检查第二次测速生成的文件..."
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "错误: 文件 $file 未生成"
              echo "当前目录内容:"
              ls -la
              echo "output 目录内容:"
              ls -la output/
              exit 1
            else
              echo "✓ 找到文件 $file"
              filesize=$(wc -c < "$file")
              echo "文件大小: $filesize 字节"
            fi
          done

      - name: 更新 README
        run: |
          # 在 README.md 中添加更新信息
          cat << EOF >> README.md
          
          ## 最新更新信息
          更新时间：$(date '+%Y-%m-%d %H:%M:%S')
          
          ### 可用文件
          - M3U格式：[\`result.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.m3u)
          - TXT格式：[\`result.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.txt)
          
          ### HTTP测速结果
          - M3U格式：[\`first_test.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/first_test.m3u)
          - TXT格式：[\`first_test.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/first_test.txt)
          EOF

      - name: 提交并推送更改
        run: |
          # 配置 Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 指定要添加的文件
          files_to_add=(
            "output/first_test.m3u"
            "output/first_test.txt"
            "output/result.m3u"
            "output/result.txt"
            "README.md"
          )
          
          # 强制添加文件，即使被 .gitignore 忽略
          for file in "${files_to_add[@]}"; do
            if [ -f "$file" ]; then
              git add -f "$file"
              echo "已添加文件: $file"
            else
              echo "文件 $file 不存在，跳过添加"
            fi
          done
          
          # 检查是否有更改需要提交
          if git diff --staged --quiet; then
            echo "没有需要提交的更改"
          else
            echo "提交更改..."
            git commit -m "更新 IPTV 文件和 README - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
          fi
