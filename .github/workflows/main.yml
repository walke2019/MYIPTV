name: IPTV M3U 每天自动更新

on:
  schedule:
    - cron: '0 4 * * *'  # 每天北京时间12点执行（UTC+8）
  workflow_dispatch:

# 添加必要的权限设置
permissions:
  contents: write
  actions: write  # 允许工作流修改操作
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为中国时区

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GITHUB_TOKEN 进行认证
          persist-credentials: true  # 保持认证状态

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Check Pipfile format
        run: |
          if [ -f "Pipfile" ]; then
            echo "Starting to check Pipfile format..."
            pip install toml
            set +e
            python -c "import toml; toml.load(open('Pipfile'))"
            check_status=$?
            set -e
            if [ $check_status -eq 0 ]; then
              echo "Pipfile format is valid."
            else
              echo "Pipfile format is invalid. Here is the content of Pipfile:"
              cat Pipfile
              exit 1
            fi
          else
            echo "Pipfile not found in the project directory. Please ensure it exists."
            exit 1
          fi

      - name: Install pipenv
        run: |
          echo "Installing pipenv..."
          pip install pipenv
          if [ $? -ne 0 ]; then
            echo "Failed to install pipenv. Please check the network or Python environment."
            exit 1
          fi

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          pipenv install --deploy
          if [ $? -ne 0 ]; then
            echo "Failed to install project dependencies. Check Pipfile or network."
            exit 1
          fi

      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          if [ $? -ne 0 ]; then
            echo "Failed to install FFmpeg. Check system permissions or network."
            exit 1
          fi

      - name: Generate M3U and TXT files
        run: |
          if [ -f "main.py" ]; then
            echo "Running main.py to generate M3U and TXT files..."
            pipenv run python main.py 2>&1 | tee main.log
            if [ $? -ne 0 ]; then
              echo "Failed to generate M3U and TXT files. Check main.py or dependencies."
              echo "Check main.log for detailed error messages:"
              cat main.log
              exit 1
            fi
            
            # 检查所有需要的文件
            required_files=(
              "output/result.m3u"
              "output/result.txt"
              "output/result_http_test.m3u"
              "output/result_http_test.txt"
            )
            
            echo "检查生成的文件..."
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "错误: 文件 $file 未生成"
                echo "当前目录内容:"
                ls -la
                echo "output 目录内容:"
                ls -la output/
                exit 1
              else
                echo "✓ 找到文件 $file"
                filesize=$(wc -c < "$file")
                echo "文件大小: $filesize bytes"
              fi
            done
          else
            echo "未找到 main.py 文件，当前目录内容:"
            ls -la
            exit 1
          fi

      - name: Update README
        run: |
          # 在README.md中添加更新信息
          cat << EOF >> README.md
          
          ## 最新更新信息
          更新时间：$(date '+%Y-%m-%d %H:%M:%S')
          
          ### 可用文件
          - M3U格式：[\`result.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.m3u)
          - TXT格式：[\`result.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result.txt)
          
          ### HTTP测速结果
          - M3U格式：[\`result_http_test.m3u\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result_http_test.m3u)
          - TXT格式：[\`result_http_test.txt\`](https://raw.githubusercontent.com/${{ github.repository }}/main/output/result_http_test.txt)
          EOF

      - name: Commit and Push
        run: |
          # 配置Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 添加所有更改
          git add output/result.m3u
          git add output/result.txt
          git add output/result_http_test.m3u
          git add output/result_http_test.txt
          git add README.md
          
          # 检查是否有更改需要提交
          if git diff --staged --quiet; then
            echo "没有需要提交的更改"
          else
            echo "提交更改..."
            git commit -m "更新 IPTV 文件和 README - $(date '+%Y-%m-%d %H:%M:%S')"
            
            # 使用 GITHUB_TOKEN 进行认证并推送
            git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
            git push -f origin HEAD:main
          fi
