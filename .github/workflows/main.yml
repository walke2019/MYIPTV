name: IPTV M3U 每天自动更新

on:
  schedule:
    - cron: '0 4 * * *'  # 每天北京时间12点执行（UTC+8）
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为中国时区

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史
          persist-credentials: false  # 不使用默认token

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Check Pipfile format
        run: |
          if [ -f "Pipfile" ]; then
            echo "Starting to check Pipfile format..."
            pip install toml
            set +e
            python -c "import toml; toml.load(open('Pipfile'))"
            check_status=$?
            set -e
            if [ $check_status -eq 0 ]; then
              echo "Pipfile format is valid."
            else
              echo "Pipfile format is invalid. Here is the content of Pipfile:"
              cat Pipfile
              exit 1
            fi
          else
            echo "Pipfile not found in the project directory. Please ensure it exists."
            exit 1
          fi

      - name: Install pipenv
        run: |
          echo "Installing pipenv..."
          pip install pipenv
          if [ $? -ne 0 ]; then
            echo "Failed to install pipenv. Please check the network or Python environment."
            exit 1
          fi

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          pipenv install --deploy
          if [ $? -ne 0 ]; then
            echo "Failed to install project dependencies. Check Pipfile or network."
            exit 1
          fi

      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          if [ $? -ne 0 ]; then
            echo "Failed to install FFmpeg. Check system permissions or network."
            exit 1
          fi

      - name: Generate M3U and TXT files
        run: |
          if [ -f "main.py" ]; then
            echo "Running main.py to generate M3U and TXT files..."
            pipenv run python main.py 2>&1 | tee main.log
            if [ $? -ne 0 ]; then
              echo "Failed to generate M3U and TXT files. Check main.py or dependencies."
              echo "Check main.log for detailed error messages:"
              cat main.log
              exit 1
            fi
            # 检查所有需要的文件是否生成
            required_files=(
              "output/result.m3u"
              "output/result.txt"
              "output/result_http_test.m3u"
              "output/result_http_test.txt"
            )
            echo "Checking generated files..."
            ls -la output/
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "Error: File $file was not generated."
                echo "Current directory contents:"
                ls -la
                echo "Output directory contents:"
                ls -la output/
                exit 1
              else
                echo "✓ Found $file"
                echo "File size: $(stat -f%z "$file") bytes"
              fi
            done
          else
            echo "Error: Script file main.py not found in current directory:"
            ls -la
            exit 1
          fi

      - name: Debug File Status
        run: |
          echo "Current directory structure:"
          ls -R
          echo "Git status:"
          git status
          echo "Checking output directory:"
          if [ -d "output" ]; then
            echo "Output directory exists"
            ls -la output/
          else
            echo "Output directory does not exist"
          fi

      - name: Update README.md
        run: |
          # 获取当前时间
          current_time=$(date '+%Y-%m-%d %H:%M:%S')
          
          # 获取仓库信息
          repo_owner=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          
          # 创建临时文件
          tmp_file=$(mktemp)
          
          # 读取README.md直到"### 3. 使用生成的直播源"这一行
          sed '/### 3. 使用生成的直播源/q' README.md > "$tmp_file"
          
          # 添加更新的内容
          cat >> "$tmp_file" << EOF
          - 最近更新时间：\`$current_time\`
          - 直接访问：
            - M3U格式：[\`result.m3u\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/output/result.m3u)
            - TXT格式：[\`result.txt\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/output/result.txt)
          - CDN加速：
            - M3U格式：[\`result.m3u\`](https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@main/output/result.m3u)
            - TXT格式：[\`result.txt\`](https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@main/output/result.txt)
          - HTTP测速结果：
            - M3U格式：[\`result_http_test.m3u\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/output/result_http_test.m3u)
            - TXT格式：[\`result_http_test.txt\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/output/result_http_test.txt)

          ## 最佳实践
          EOF
          
          # 从"## 最佳实践"开始的内容追加到临时文件
          sed -n '/^## 最佳实践/,$p' README.md >> "$tmp_file"
          
          # 替换原始文件
          mv "$tmp_file" README.md

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # 显示当前git配置
          echo "Current git configuration:"
          git config --list

      - name: Reset and Clean Working Directory
        run: |
          echo "Git status before reset:"
          git status
          # 重置所有更改
          git reset --hard
          # 清理未跟踪的文件
          git clean -fd
          echo "Git status after reset:"
          git status

      - name: Sync with Remote
        run: |
          echo "Fetching from remote..."
          git fetch origin
          echo "Current branch status:"
          git status
          # 同步远程更改
          git pull origin main --rebase
          echo "Git status after pull:"
          git status

      - name: Stage and Commit Changes
        run: |
          echo "Staging files..."
          # 创建输出目录（如果不存在）
          mkdir -p output
          
          # 添加生成的文件
          for file in output/result.m3u output/result.txt output/result_http_test.m3u output/result_http_test.txt README.md; do
            if [ -f "$file" ]; then
              echo "Adding $file to git..."
              git add "$file"
              echo "File size of $file: $(stat -f%z "$file") bytes"
            else
              echo "Warning: $file does not exist"
            fi
          done
          
          # 检查是否有更改需要提交
          if ! git diff --staged --quiet; then
            echo "Changes detected, committing..."
            git commit -m "Update IPTV files and README (包含两次测速结果) - $(date '+%Y-%m-%d %H:%M:%S')"
          else
            echo "No changes to commit. Current status:"
            git status
          fi

      - name: Push Changes
        run: |
          echo "Attempting to push changes..."
          echo "Current branch:"
          git branch
          echo "Remote repositories:"
          git remote -v
          # 配置新的远程URL
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          # 推送更改
          git push origin HEAD:main
